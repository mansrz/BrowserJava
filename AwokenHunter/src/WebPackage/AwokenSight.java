/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package WebPackage;

import java.awt.*;
import java.awt.event.*;
import java.net.*;
import javax.net.ssl.*;
import java.io.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.event.*;
/**
 *
 * @author Jake
 */
public class AwokenSight extends javax.swing.JFrame {

    /**
     * Creates new form AwokenSight
     */
    
    
    WebProtocol protocol;
    Socket webSocket;
    String currentHostName;
    ArrayList<String> navigationArray;
    int navigationArrayIndex;
    
    public AwokenSight() {
        initComponents();
        
        setSize(880, 431);
        
        webSocket = new Socket();
        currentHostName = "";
        navigationArray = new ArrayList<String>();
        navigationArrayIndex = -1;
        backButton.setEnabled(false);
        foreButton.setEnabled(false);
        refreshButton.setEnabled(false);
        
        addressBar.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent event)
            {
                requestHTML(addressBar.getText(), WebNavigationType.ADDRESS);
            }
        });
        
        
        
        webDisplay.setContentType("text/html");
        webDisplay.setEditable(false);
        webDisplay.addHyperlinkListener(new HyperlinkListener()
        {
            @Override
            public void hyperlinkUpdate(HyperlinkEvent event)
            {
                URL urlAddress = event.getURL();
                if (event.getEventType().equals(HyperlinkEvent.EventType.ACTIVATED))
                {
                    if (urlAddress == null)
                    {
                        String urlDescription = event.getDescription();
                        if (urlDescription.charAt(0) != '/')
                        {
                            urlDescription = "/" + urlDescription;
                        }
                        
                        requestHTML(currentHostName + urlDescription, WebNavigationType.HYPERLINNK);
                    }
                    else
                    {
                        requestHTML(urlAddress.toExternalForm(), WebNavigationType.HYPERLINNK);
                    }
                }
            }
        });
        
        webDisplay.setText("<html>\n" +
"<head>\n" +
"<title>AwokenHunterBrowser</title>\n" +
"</head>\n" +
"<body>\n" +
"<b><p style=\"font:30pt Georgia;color:#ff0000;\">Welcome</p></b>\n" +
"<p>This is the intro page of your new browser.</p>\n" +
"</body>\n" +
"</html>");
    }
    
    public enum WebProtocol
    {
        HTTP, HTTPS, UNKNOWN
    }
    
    public enum WebNavigationType
    {
        BACK, FORE, REFRESH, ADDRESS, HYPERLINNK, MOVE
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        addressBar = new javax.swing.JTextField();
        backButton = new javax.swing.JButton();
        foreButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        webDisplay = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(844, 30));

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        foreButton.setText("Fore");
        foreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foreButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(foreButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(refreshButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 12, Short.MAX_VALUE)
                .add(addressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 688, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(addressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(backButton)
                    .add(foreButton)
                    .add(refreshButton))
                .add(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jScrollPane2.setViewportView(webDisplay);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        if (navigationArrayIndex > 0)
        {
            requestHTML(navigationArray.get(navigationArrayIndex - 1), WebNavigationType.BACK);
        }
    }//GEN-LAST:event_backButtonActionPerformed

    private void foreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foreButtonActionPerformed
        if (navigationArrayIndex < navigationArray.size() - 1)
        {
            requestHTML(navigationArray.get(navigationArrayIndex + 1), WebNavigationType.FORE);
            
        }
    }//GEN-LAST:event_foreButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        requestHTML(navigationArray.get(navigationArrayIndex), WebNavigationType.REFRESH);
    }//GEN-LAST:event_refreshButtonActionPerformed

    private int assignNavigationIndex()
    {
        return navigationArray.size() - 1;
    }
    
    private String requestHTML(String webAddress, WebNavigationType navigationType)
    {
        
        String hostAddress;
        String fileAddress;
        
        if (webAddress.toUpperCase().contains("HTTP://"))
        {
            this.protocol = WebProtocol.HTTP;
            webAddress = webAddress.replaceFirst("(?i)http://", "");
        }
        else if (webAddress.toUpperCase().contains("HTTPS://"))
        {
            this.protocol = WebProtocol.HTTPS;
            webAddress = webAddress.replaceFirst("(?i)https://", "");
        }
        else
        {
            this.protocol = WebProtocol.HTTP;
        }
        
        if (!webAddress.contains("/"))
        {
            webAddress = webAddress + "/";
        }
        
        
        
        hostAddress = webAddress.substring(0, webAddress.indexOf("/"));
        fileAddress = webAddress.substring(webAddress.indexOf("/"));
        
        try
        {
            String request = "";
            
            if (this.protocol == WebProtocol.HTTP)
            {
                this.webSocket = new Socket(hostAddress, 80);
            }
            else if (this.protocol == WebProtocol.HTTPS)
            {
                this.webSocket = SSLSocketFactory.getDefault().createSocket(hostAddress, 443);
            }
            
            request = request + "GET " + fileAddress + " HTTP/1.1\n";
            request = request + "Host: " + hostAddress + "\n";
            request = request + "User-Agent: Mozilla/5.0 (Macintosh)\n";
            request = request + "Connection: close\n\n";
            
            PrintWriter outStream = new PrintWriter(webSocket.getOutputStream());
            outStream.print(request);
            outStream.flush();
            
            String reply = "";
            
            BufferedReader inStream = new BufferedReader(new InputStreamReader(webSocket.getInputStream()));
            
            while (true)
            {
                String line = inStream.readLine();
                if (line == null)
                {
                    break;
                }
                reply = reply + line + "\n";
            }
            
            int code = Integer.parseInt(reply.substring(9, 12));
            
            int newLocation = reply.indexOf("Location: ")+ "Location: ".length();
            String postLocation = reply.substring(newLocation);
            
            switch (code)
            {
                case 301:
                    requestHTML(postLocation.substring(0, postLocation.indexOf("\n")), WebNavigationType.MOVE);
                    //////AddressBar
                break;
                case 302:
                    requestHTML(postLocation.substring(0, postLocation.indexOf("\n")), WebNavigationType.MOVE);
                break;
                default:
                    String htmlString=reply.substring(reply.indexOf("<"));
                    
                    htmlString=htmlString.replaceAll("<frame", "<ssss");
                    htmlString=htmlString.replaceAll("<meta", "<ssss");
                    
                    
                    
                    addressBar.setText(webAddress);
                    webDisplay.setText(htmlString);
                    //System.out.println(TitleExtractor.getPageTitle(webAddress));
                    currentHostName = hostAddress;
                    
                    System.out.println("Before\nIndex: " + navigationArrayIndex + "\nSize: " + navigationArray.size() + "\n");
                    
                    switch (navigationType)
                    {
                        case BACK:
                            navigationArrayIndex--;
                        break;
                        case FORE:
                            navigationArrayIndex++;
                        break;
                        case REFRESH:
                            
                        break;
                        default:
                            
                            if (navigationArrayIndex < navigationArray.size() - 1)
                            {
                                for (int i = navigationArrayIndex + 1; i < navigationArray.size(); i++)
                                {
                                    navigationArray.remove(i);
                                }
                            }
                            
                            navigationArray.add(webAddress);
                            navigationArrayIndex++;
                        break;
                    }
                    
                    if (navigationArrayIndex <= 0)
                    {
                        backButton.setEnabled(false);
                    }
                    else
                    {
                        backButton.setEnabled(true);
                    }
                    if (navigationArrayIndex >= navigationArray.size() - 1)
                    {
                        foreButton.setEnabled(false);
                    }
                    else
                    {
                        foreButton.setEnabled(true);
                    }
                    if (navigationArray.size() == 0)
                    {
                        refreshButton.setEnabled(false);
                    }
                    else
                    {
                        refreshButton.setEnabled(true);
                    }
                    
                    System.out.println("After\nIndex: " + navigationArrayIndex + "\nSize: " + navigationArray.size() + "\n");
                    
                break;
            }
            
            webSocket.close();
            
        }
        catch (UnknownHostException ex)
        {
            System.out.println("Exception");
        }
        catch (IOException ex)
        {
            System.out.println("Exception");
        }
        
        
        return "";
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AwokenSight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AwokenSight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AwokenSight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AwokenSight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new AwokenSight().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressBar;
    private javax.swing.JButton backButton;
    private javax.swing.JButton foreButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton refreshButton;
    private javax.swing.JEditorPane webDisplay;
    // End of variables declaration//GEN-END:variables
}
